name: Backend CI/CD - Deploy to EC2 via SSM

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install deps (optional)
        run: |
          npm ci
          npm run build --if-present

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Send deploy command to instance via SSM
        env:
          INSTANCE_ID: ${{ secrets.INSTANCE_ID }}
        run: |
          set -euo pipefail
          echo "Using instance: $INSTANCE_ID"

          read -r -d '' CMD <<'EOF' || true
            #!/bin/bash
            set -e
            export HOME=/home/ec2-user
            cd /home/ec2-user/todo-backend || exit 1
            git fetch --all --prune
            git reset --hard origin/main
            npm ci --production
            pm2 reload todo-backend || pm2 start app.js --name todo-backend --update-env
            pm2 save
            EOF

          echo "Sending SSM command..."
          SENDOUT=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy from GitHub Actions" \
            --parameters commands="$CMD" \
            --timeout-seconds 600 \
            --region "${{ secrets.AWS_REGION }}" \
            --output json)
          echo "$SENDOUT" > /tmp/ssm_send_output.json
          COMMAND_ID=$(jq -r '.Command.CommandId' /tmp/ssm_send_output.json)
          echo "command_id=$COMMAND_ID"
          # wait & fetch invocation
          for i in $(seq 1 60); do
            sleep 5
            STATUS=$(aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --region "${{ secrets.AWS_REGION }}" --query 'Status' --output text || echo "Unknown")
            echo "Attempt $i - Status: $STATUS"
            if [ "$STATUS" = "Success" ] || [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              break
            fi
          done
          aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --region "${{ secrets.AWS_REGION }}" --output json > /tmp/ssm_invocation.json
          cat /tmp/ssm_invocation.json
          STATUS_FINAL=$(jq -r '.Status' /tmp/ssm_invocation.json || echo "Unknown")
          echo "Final SSM status: $STATUS_FINAL"
          if [ "$STATUS_FINAL" != "Success" ]; then
            echo "SSM command failed."
            exit 1
          fi
